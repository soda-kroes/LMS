@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Report Book";
}



@*DataTables CSS*@
<link href="https://cdn.datatables.net/1.10.24/css/dataTables.bootstrap4.min.css" rel="stylesheet">
<link href="~/web/ViewUser.css" rel="stylesheet" />
@*DataTables JS*@
<script src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.10.24/js/dataTables.bootstrap4.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.68/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.68/vfs_fonts.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.4.0/exceljs.min.js"></script>




<style>
    .txtTitle {
        font-family: "Jersey 25", sans-serif;
        font-weight: 400;
        font-style: normal;
        color: black;
        font-size: 22px;
    }
</style>
<div class="container">
    <div class="row">
        <div class="col-12">
            <!-- Page Heading -->
            <div class="d-sm-flex align-items-center justify-content-between mb-4">
                <div class="mb-0 text-gray-800"> <img src="~/assets/images/icons8-dashboard-48.png" style="width:25px; height:25px; margin-bottom:5px;" /> <span style="color:grey">Dashboard</span> <i class="fa-solid fa-angles-right" style="color:grey"></i> <span style="color:grey">Report</span></div>
                <div>
                    <a class="d-none d-sm-inline-block btn btn-sm btn-success shadow-sm text-light" id="exportExcelBtn">
                        <i class="fa-solid fa-user-plus fa-sm text-white-50"></i> Export Excel
                    </a>
                    <a class="d-none d-sm-inline-block btn btn-sm btn-info shadow-sm text-light" id="exportPdfBtn">
                        <i class="fa-solid fa-user-plus fa-sm text-white-50"></i> Export PDF
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <div class="btn-group">
                <div class="form-inline">
                    <small style="margin-right:10px;">BORROW DATE: </small>
                    <small>From</small>
                    <input class="form-control form-control-sm ml-2" type="date" name="fdate" id="fdate" required="required" />
                    <small class="ml-2">To</small>
                    <input class="form-control form-control-sm ml-2" type="date" name="tdate" id="tdate" required="required" />
                </div>
                <div class="form-inline ml-2">
                    <small id="txt1">Status:</small>
                    <select class="form-control-sm ml-2" id="ddlStatus" style="width: 200px;">
                        <option value="" selected disabled>--- Choose One ---</option>
                        <option value="1">Borrow</option>
                        <option value="0">Return</option>
                    </select>
                    <a href="#" id="btnLoadRPT">
                        <img src="~/assets/images/icons8-search-100.png" style="width:45px; height:45px;" />
                    </a>
                  
                </div>
            </div>
        </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="table-responsive">
                    <div class="row">
                        <div class="col-sm-12">
                            <table id="idReportBookView" class="table table-striped table-bordered table-sm table-hover" style="width:100%;">
                                <thead class="text-center">
                                    <tr>
                                        <th>No</th>
                                        <th>MEMBER ID</th>
                                        <th>MEMBER NAME</th>
                                        <th>BOOK ID</th>
                                        <th>BOOK NAME</th>
                                        <th>DATE BORROW</th>
                                        <th>DATE RETURN</th>
                                        <th>PURPOSE</th>
                                        <th>STATUS</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


<script type="text/javascript">


    //GET DATA
    $('#idReportBookView').DataTable({
        data: DataReports,
        columns: [
            {
                render: function (data, type, full, meta) { return meta.row + 1; }
            },
            { data: "memberId" },
            { data: "memberName" },
            { data: "bookId" },
            { data: "bookName" },
            { data: "dateBorrowStr" },
            { data: "dateReturnStr" },
            { data: "purpose" },
            {
                data: "statusStr",
                render: function (data, type, full, meta) {
                    var colorClass = "";
                    if (data == "Return") {
                        colorClass = "badge-danger";
                    } else {
                        colorClass = "badge-success";
                    }
                    return '<span style="padding:3px;" class="badge ' + colorClass + '">' + data + '</span>';
                }
            },

            
        ]
    });

    //get value typeOfBook
    var ddlStatusValue;
    $("#ddlStatus").change(function () {
        var selectOptionValue = $(this).val();
        ddlStatusValue = selectOptionValue;
        alert(ddlStatusValue);
    });

    $("#btnLoadRPT").click(function (){
        var fromDate = $("#fdate").val();
        var toDate = $("#tdate").val();
        getData(fromDate, toDate, ddlStatusValue);

    })

    var table = $('#idReportBookView').DataTable();
    var DataReports = [];
    function getData(fdate='',tdate='',ddlStatus='') {
        // showLoading();
        $.ajax({
            url: '@Url.Action("GetBookReport","ReportJsonData")',
            type: "GET",
            dataType: "JSON",
            data: {
                fromDate: fdate !== '' ? fdate : '',
                toDate: tdate !== '' ? tdate : '',
                status: ddlStatusValue !== '' ? ddlStatusValue : ''
            },
            success: function (response) {
                if (response.errCode == 0) {
                    console.log(response);
                    // hideLoading();
                    DataReports = [];
                    DataReports = response.bookReports;

                    table.clear();
                    table.rows.add(DataReports);
                    table.draw();

                    $("#exportExcelBtn").click(function () {
                        exportToExcel(response.bookReports);
                    });

                    $("#exportPdfBtn").click(function () {
                        exportToPdf(response.bookReports);
                    });


                    //Get Data To Excel
                    function exportToExcel(response) {
                        // Create a new Excel workbook
                        var workbook = new ExcelJS.Workbook();
                        var worksheet = workbook.addWorksheet("LMS-Report");


                        // Add column headers to the worksheet
                        var headers = [
                            "№",
                            "MEMBER ID",
                            "MEMBER NAME",
                            "BOOK ID",
                            "BOOK TITLE",
                            "DATE BORROW",
                            "DATE RETURN",
                            "PURPOSE",
                            "STATUS",
                        ];
                        worksheet.addRow(headers);

                        // Set header styles
                        var headerRow = worksheet.getRow(1);
                        headerRow.eachCell(function (cell) {
                            cell.fill = {
                                type: "pattern",
                                pattern: "solid",
                                fgColor: { argb: "FF808080" }
                            };
                            cell.font = {
                                bold: true
                            };
                        });


                        // Add data rows to the worksheet
                        $.each(response, function (index, item) {
                            var rowData = [
                                index + 1,
                                item.memberId,
                                item.memberName,
                                item.bookId,
                                item.bookName,
                                item.dateBorrowStr,
                                item.DateReturnStr,
                                item.purpose,
                                item.statusStr
                            ];
                            worksheet.addRow(rowData);
                        });

                        //set autofit
                        worksheet.columns.forEach(function (column) {
                            var maxLength = 0;
                            column.eachCell({ includeEmpty: true }, function (cell) {
                                var columnLength = cell.value ? cell.value.toString().length : 10;
                                if (columnLength > maxLength) {
                                    maxLength = columnLength;
                                }
                            });
                            column.width = maxLength + 2; 
                        });

                        // Set content alignment to center
                        worksheet.eachRow(function (row, rowNumber) {
                            row.eachCell(function (cell) {
                                cell.alignment = { horizontal: 'center' };
                            });
                        });

                        // Generate a download link for the Excel file
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            var blob = new Blob([buffer], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
                            var url = URL.createObjectURL(blob);
                            var link = document.createElement("a");
                            link.href = url;
                            link.download = "LMS-Report.xlsx";
                            link.click();
                        });
                    }

                    // Process the retrieved data and update the table or perform any other actions
                    var tableBody = $("#rptAccountListPeriod tbody");
                    tableBody.empty();

                    $.each(response.AccountInfos, function (index, item) {
                        var row = "<tr>" +
                            "<td>" + (index + 1) + "</td>" +
                            "<td>" + item.memberId + "</td>" +
                            "<td>" + item.memberName + "</td>" +
                            "<td>" + item.bookId + "</td>" +
                            "<td>" + item.bookName + "</td>" +
                            "<td>" + item.dateBorrowStr + "</td>" +
                            "<td>" + item.dateReturnStr + "</td>" +
                            "<td>" + item.purpose + "</td>" +
                            "<td>" + item.statusStr + "</td>" +
                            "</tr>";
                        tableBody.append(row);
                    });
                    //Get Data To Excel

                    function exportToPdf(response) {
                        // Define the table headers
                        var headers = [
                            { text: "№", style: "tableHeader" },
                            { text: "MEMBER ID", style: "tableHeader" },
                            { text: "MEMBER NAME", style: "tableHeader" },
                            { text: "BOOK ID", style: "tableHeader" },
                            { text: "BOOK TITLE", style: "tableHeader" },
                            { text: "DATE BORROW", style: "tableHeader" },
                            { text: "DATE RETURN", style: "tableHeader" },
                            { text: "PURPOSE", style: "tableHeader" },
                            { text: "STATUS", style: "tableHeader" },
                        ];

                        // Initialize the table data array
                        var data = [headers];

                        // Add data rows to the array
                        response.forEach(function (item, index) {
                            var rowData = [
                                index + 1,
                                item.memberId || "",
                                item.memberName || "",
                                item.bookId || "",
                                item.bookName || "",
                                item.dateBorrowStr || "",
                                item.dateReturnStr || "",
                                item.purpose || "",
                                item.statusStr || "",
                            ];
                            data.push(rowData);
                        });

                        // Define the document definition
                        var docDefinition = {
                            content: [
                                { text: "LMS Report", style: "title" },
                                { text: "Generated on: " + new Date().toLocaleString(), alignment: "right", margin: [0, 0, 20, 10] },
                                { table: { headerRows: 1, body: data }, style: "table" },
                            ],
                            styles: {
                                title: { fontSize: 22, bold: true, alignment: "center", margin: [0, 0, 0, 20] },
                                table: { margin: [0, 5, 0, 15] },
                                tableHeader: { bold: true, fillColor: "#dddddd", alignment: "center" },
                            },
                        };

                        // Generate the PDF document
                        var pdfDoc = pdfMake.createPdf(docDefinition);

                        // Download the PDF file
                        pdfDoc.download("LMS-Report.pdf");
                    }

                } else {

                }
            }
        });
    }
    getData();

  




    // Hold screen to validation
    var form = document.getElementsByClassName('need-novalidate-new');
    var validation = Array.prototype.filter.call(form, function (forms) {
        forms.addEventListener('submit', function (event) {
            if (forms.checkValidity() == false) {
                event.preventDefault();
            }
            else {
                event.preventDefault();
                var obj = {};
                obj.IdCard = $('#txtIdCard').val();
                obj.FirstName = $('#txtFirstName').val();
                obj.LastName = $('#txtLastName').val();
                obj.Gender = $('#ddlGender').val();
                obj.DateOfBirthStr = $('#txtDateOfBirth').val();
                obj.Email = $('#txtEmail').val();
                obj.Tell = $('#txtTell').val();
                obj.Address = $("#txtAddress").val();

                $('#idFormMember').modal('hide');
                showLoading();

                $.ajax({
                    url: '@Url.Action("PostMember","MemberJsonData")',
                    type: "POST",
                    dataType: "JSON",//OK
                    data: { objMember: obj },
                    success: function (response) {
                        if (response.errCode == 0) {
                            setTimeout(function () {
                                hideLoading();
                                Toast.fire({
                                    icon: 'success',
                                    title: response.errMsg
                                })
                                getData();

                                // Reset the form
                                forms.reset();
                                forms.classList.remove('was-validated');
                            }, 2000);// Delay modal
                        }
                        else if (response.errCode == 1) {
                            hideLoading();
                            Toast.fire({
                                icon: 'error',
                                title: response.errMsg
                            })
                        }
                        else {
                            hideLoading();
                            Toast.fire({
                                icon: 'error',
                                title: response.errMsg
                            })
                        }
                    },
                });
            }
            forms.classList.add('was-validated');
        }, false);
    });

    //------------------------------------- For Loading -------------------------------
    function showLoading() {
        var loadingIndicatorOverlay = document.createElement('div');
        loadingIndicatorOverlay.classList.add('loading-indicator-overlay');

        var loadingIndicator = document.createElement('div');
        loadingIndicator.classList.add('loading-indicator');

        var loadingText = document.createElement('div');
        loadingText.classList.add('loading-text');
        loadingText.textContent = 'Please wait...';

        loadingIndicatorOverlay.appendChild(loadingIndicator);
        loadingIndicatorOverlay.appendChild(loadingText);
        document.body.appendChild(loadingIndicatorOverlay);

        return true;
    }

    function hideLoading() {
        var loadingIndicator = document.querySelector('.loading-indicator-overlay');
        if (loadingIndicator) {
            loadingIndicator.remove();
        }
    }

</script>